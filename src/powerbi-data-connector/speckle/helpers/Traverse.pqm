let
    GetObject = Extension.LoadFunction("Api.GetObject.pqm"),
    Diagnostics.Log = Extension.LoadFunction("Diagnostics.pqm")[LogValue],
    Extension.LoadFunction = (fileName as text) =>
        let
            binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
        in
            try
                Expression.Evaluate(asText, #shared) catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
    //TODO: Not implemented yet
    TraverseTable = (item as table) as table => item,
    // Will traverse an undetermined value (list, table, record).
    TraverseValue = (i as any) as any =>
        let
            item = Diagnostics.Log("Traverse value", i) meta Value.Metadata(i)
        in
            if Value.Is(item, type list) then
                // Return a transformed list by traversing all items
                Diagnostics.Log(
                    "List travered",
                    List.Transform(item, (a) => @TraverseValue(Value.ReplaceMetadata(a, Value.Metadata(i))))
                )
            else if Value.Is(item, type record) then
                // Traverse this record individually
                TraverseRecord(item)
            else if Value.Is(item, type table) then
                // Traverse this table
                TraverseTable(item)
            else
                // If none of the above, assume it's just a primitive type and return it as-is.
                item,
    // Traverses a generic record
    TraverseRecord = (object as record) as any =>
        let
            isSpeckle = Diagnostics.Log("Is Speckle", Record.HasFields(object, {"speckle_type"})),
            isReference = Diagnostics.Log("Is Reference", object[speckle_type] = "reference"),
            // Get the names of all fields
            fields = Record.FieldNames(object),
            // Remove all known fields that don't need traversing
            cleanFields = List.RemoveItems(fields, {"id", "speckle_type", "applicationId"}),
            // Transform the list of field names into a set of transform operations
            transformOps = List.Transform(
                cleanFields, each {_, (a) => TraverseValue(Value.ReplaceMetadata(a, Value.Metadata(object)))}
            ),
            // Get the object's metadata (server and stream will be saved in here)
            info = Value.Metadata(object)
        in
            // Transform all fields and return the modified object
            if (isReference) then
                // Swap reference for call to GetObject
                () =>
                    TraverseValue(
                        Value.ReplaceMetadata(
                            GetObject(info[server], info[stream], object[referencedId]), Value.Metadata(object)
                        )
                    )
            else
                try Record.TransformFields(object, transformOps, MissingField.Error) otherwise error "oopsies"
in
    TraverseValue
