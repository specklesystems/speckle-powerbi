let
    Speckle.Api.Fetch = Extension.LoadFunction("Api.Fetch.pqm"),
    Extension.LoadFunction = (fileName as text) =>
        let
            binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
        in
            try
                Expression.Evaluate(asText, #shared) catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ]
in
    (server as text, streamId as text, objectId as text) =>
        let
            query = "query($streamId: String!, $objectId: String!) { 
            stream( id: $streamId ) { 
                object (id: $objectId) { 
                    data
                }
            }
        }",
            #"JSON" = Speckle.Api.Fetch(server, query, [streamId = streamId, objectId = objectId])
        in
            #"JSON"[stream][object][data]
