// function for getting structured object data
(url as text) as text =>
    let
        // import the parser function and getModel
        Parser = Extension.LoadFunction("Parser.pqm"),
        GetModel = Extension.LoadFunction("GetModel.pqm"),
        // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
        
        // get parsed URL components and model info
        parsedUrl = Parser(url),
        server = parsedUrl[baseUrl],
        modelInfo = GetModel(url),
        
        // get API key if available
        apiKey = try Extension.CurrentCredential()[Key] otherwise null,
        
        // make the API request to objects endpoint
        Source = Web.Contents(
            Text.Combine({server, "objects", parsedUrl[projectId], modelInfo[rootObjectId]}, "/"),
            [
                Headers = [
                    #"Authorization" = if apiKey = null then "" else Text.Format("Bearer #{0}", {apiKey})
                ],
                ManualStatusHandling = {400, 401, 403}
            ]
        ),

        // parse the JSON response
        JsonResponse = Json.Document(Source),
        JsonText = Json.FromValue(JsonResponse),

        SendOperation = Web.Contents(
            "http://127.0.0.1:8000",
            [
                Headers = [
                    #"Content-Type" = "application/json",
                    #"Method" = "POST"
                ],
                Content = JsonText,
                ManualStatusHandling = {400, 401, 403, 404, 500}
            ]
        ),
        
        Status = if Value.Metadata(SendOperation)[Response.Status] = 200 
            then "Data successfully sent to localhost" 
            else "Failed to send data"

    in
        Status