// function for getting structured object data
(url as text) as table =>
    let
        // import the required functions
        GetModel = Extension.LoadFunction("GetModel.pqm"),
        SendToServer = Extension.LoadFunction("SendToServer.pqm"),
        
        // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
        
        // get model info and server data
        modelInfo = GetModel(url),
        rootId = modelInfo[rootObjectId],
        serverData = SendToServer(url),
        
        // Convert table to list of records
        DataList = Table.ToRecords(serverData),
        
        // Transform the server data into required format
        TransformedTable = Table.FromRecords(
            List.Transform(
                DataList,
                each let
                    // Remove the fields we want separately
                    dataFields = Record.RemoveFields(
                        _,
                        {"id", "speckle_type", "displayValue"}
                    )
                in
                    [
                        #"Object IDs" = _[id],
                        #"Speckle Type" = _[speckle_type],
                        #"Viewer Data ID" = rootId,
                        data = dataFields
                    ]
            )
        )

    in
        TransformedTable