(url as text) as list =>
    let
        // Import required functions
        GetModel = Extension.LoadFunction("GetModel.pqm"),
        Parser = Extension.LoadFunction("Parser.pqm"),
         // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
        
        // Get model info and parsed URL
        modelInfo = GetModel(url),
        parsedUrl = Parser(url),
        
        // Get API key if available
        apiKey = try Extension.CurrentCredential()[Key] otherwise null,
        
        // Prepare request data
        requestData = Json.FromValue([
            Url = url,
            ProjectId = parsedUrl[projectId],
            ObjectId = modelInfo[rootObjectId],
            token = apiKey
        ]),
        
        // Send request to local server
        Response = Web.Contents(
            "http://127.0.0.1:29364/download",
            [
                Headers = [
                    #"Content-Type" = "application/json",
                    #"Method" = "POST"
                ],
                Content = requestData,
                ManualStatusHandling = {400, 401, 403, 404, 500}
            ]
        ),
        
        // Parse response
        JsonResponse = Json.Document(Response)

    in
        JsonResponse