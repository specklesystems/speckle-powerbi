(url as text) as text =>
    let
        // import required functions
        GetModel = Extension.LoadFunction("GetModel.pqm"),
        Parser = Extension.LoadFunction("Parser.pqm"),
        GetUser = Extension.LoadFunction("GetUser.pqm"),

        // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],

        // get model info and parsed URL
        modelInfo = GetModel(url),
        modelName = modelInfo[modelName],
        rootId = modelInfo[rootObjectId],
        parsedUrl = Parser(url),
        userInfo = GetUser(url),
        userEmail = userInfo[UserEmail],
        serverUrl = parsedUrl[baseUrl],
        
        // get API key if available
        apiKey = try Extension.CurrentCredential()[Key] otherwise null,
        
        // check if data already exists
        CheckOperation = Web.Contents(
            "http://127.0.0.1:49161/check-data-exists",
            [
                Headers = [
                    #"Content-Type" = "application/json"
                ],
                ManualStatusHandling = {400, 401, 403, 404, 500}
            ]
        ),
        CheckResponse = Json.Document(CheckOperation),
        DataExists = CheckResponse[exists],
        
        // return "-" if data exists, otherwise proceed with sending
        Result = if DataExists then "-" else
            let
                // make the API request to objects endpoint
                Source = Web.Contents(
                    Text.Combine({parsedUrl[baseUrl], "objects", parsedUrl[projectId], modelInfo[rootObjectId]}, "/"),
                    [
                        Headers = [
                            #"Authorization" = if apiKey = null then "" else Text.Format("Bearer #{0}", {apiKey})
                        ],
                        ManualStatusHandling = {400, 401, 403}
                    ]
                ),

                // parse the JSON response
                JsonResponse = Json.Document(Source),
                JsonText = Json.FromValue([
                    userInfo = [
                        userEmail = userEmail,
                        serverUrl = serverUrl
                    ],
                    objects = JsonResponse
                ]),
                
                // send to server
                SendOperation = Web.Contents(
                    "http://127.0.0.1:49161/send-data",
                    [
                        Headers = [
                            #"Content-Type" = "application/json",
                            #"Method" = "POST"
                        ],
                        Content = JsonText,
                        ManualStatusHandling = {400, 401, 403, 404, 500}
                    ]
                ),

                SendStatus = if Value.Metadata(SendOperation)[Response.Status] = 200 
                    then "-" 
                    else "?"
            in
                SendStatus
    in
        Result