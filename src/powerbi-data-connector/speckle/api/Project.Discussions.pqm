// Function for getting comment threads from Speckle projects, models, or versions
(url as text, optional getReplies as logical) as table =>
    let
        // Import required functions
        Parser = Extension.LoadFunction("Parser.pqm"),
        ApiFetch = Extension.LoadFunction("Api.Fetch.pqm"),
    
        // Extension.LoadFunction logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
        
        // Parse the URL to get necessary components with fallback for project-only URLs
        parsedUrl = try Parser(url) otherwise 
            // Custom parsing for project-only URLs
            let
                urlParts = Uri.Parts(url),
                baseUrl = Text.Combine({urlParts[Scheme], "://", urlParts[Host]}),
                pathSegments = List.Select(Text.Split(urlParts[Path], "/"), each _ <> ""),
                projectId = if List.Count(pathSegments) >= 2 and pathSegments{0} = "projects" 
                    then pathSegments{1} else null
            in
                if projectId = null then
                    error [
                        Reason = "Invalid URL",
                        Message = "The URL must be a valid Speckle project URL in the format 'https://server/projects/PROJECT_ID' or include models/versions"
                    ]
                else
                    [
                        baseUrl = baseUrl,
                        projectId = projectId,
                        modelId = null,
                        versionId = null
                    ],
        
        server = parsedUrl[baseUrl],
        projectId = parsedUrl[projectId],
        modelId = parsedUrl[modelId],
        versionId = parsedUrl[versionId],
        
        // Set default value for getReplies
        includeReplies = getReplies ?? false,
        
        // Build GraphQL queries without string concatenation
        queryAndVariables = if versionId <> null then
            // Version-level query
            if includeReplies then
                [
                    query = "query Query($projectId: String!, $modelId: String!, $versionId: String!) {
                        project(id: $projectId) {
                            model(id: $modelId) {
                                version(id: $versionId) {
                                    commentThreads(limit: 100) {
                                        items {
                                            id
                                            archived
                                            author {
                                                name
                                            }
                                            createdAt
                                            rawText
                                            hasParent
                                            replies(limit: 100) {
                                                items {
                                                    id
                                                    hasParent
                                                    rawText
                                                    archived
                                                    author {
                                                        name
                                                    }
                                                    createdAt
                                                    replies {
                                                        items {
                                                            id
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }",
                    variables = [projectId = projectId, modelId = modelId, versionId = versionId]
                ]
            else
                [
                    query = "query Query($projectId: String!, $modelId: String!, $versionId: String!) {
                        project(id: $projectId) {
                            model(id: $modelId) {
                                version(id: $versionId) {
                                    commentThreads(limit: 100) {
                                        items {
                                            id
                                            archived
                                            author {
                                                name
                                            }
                                            createdAt
                                            rawText
                                            hasParent
                                        }
                                    }
                                }
                            }
                        }
                    }",
                    variables = [projectId = projectId, modelId = modelId, versionId = versionId]
                ]
        else if modelId <> null then
            // Model-level query
            if includeReplies then
                [
                    query = "query Query($projectId: String!, $modelId: String!) {
                        project(id: $projectId) {
                            model(id: $modelId) {
                                commentThreads(limit: 100) {
                                    items {
                                        id
                                        archived
                                        author {
                                            name
                                        }
                                        createdAt
                                        rawText
                                        hasParent
                                        replies(limit: 100) {
                                            items {
                                                id
                                                hasParent
                                                rawText
                                                archived
                                                author {
                                                    name
                                                }
                                                createdAt
                                                replies {
                                                    items {
                                                        id
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }",
                    variables = [projectId = projectId, modelId = modelId]
                ]
            else
                [
                    query = "query Query($projectId: String!, $modelId: String!) {
                        project(id: $projectId) {
                            model(id: $modelId) {
                                commentThreads(limit: 100) {
                                    items {
                                        id
                                        archived
                                        author {
                                            name
                                        }
                                        createdAt
                                        rawText
                                        hasParent
                                    }
                                }
                            }
                        }
                    }",
                    variables = [projectId = projectId, modelId = modelId]
                ]
        else
            // Project-level query
            if includeReplies then
                [
                    query = "query Query($projectId: String!) {
                        project(id: $projectId) {
                            commentThreads(limit: 100) {
                                items {
                                    id
                                    archived
                                    author {
                                        name
                                    }
                                    createdAt
                                    rawText
                                    hasParent
                                    replies(limit: 100) {
                                        items {
                                            id
                                            hasParent
                                            rawText
                                            archived
                                            author {
                                                name
                                            }
                                            createdAt
                                            replies {
                                                items {
                                                    id
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }",
                    variables = [projectId = projectId]
                ]
            else
                [
                    query = "query Query($projectId: String!) {
                        project(id: $projectId) {
                            commentThreads(limit: 100) {
                                items {
                                    id
                                    archived
                                    author {
                                        name
                                    }
                                    createdAt
                                    rawText
                                    hasParent
                                }
                            }
                        }
                    }",
                    variables = [projectId = projectId]
                ],
        
        // Make the API request using ApiFetch
        result = ApiFetch(server, queryAndVariables[query], queryAndVariables[variables]),
        
        // Extract comment threads from the response
        commentThreads = if versionId <> null then
            result[project][model][version][commentThreads][items]
        else if modelId <> null then
            result[project][model][commentThreads][items]
        else
            result[project][commentThreads][items],
        
        // Transform to table structure
        threadTable = if includeReplies then
            // Create table with replies
            let
                expandedRows = List.Transform(commentThreads, (thread) =>
                    let
                        threadRecord = [
                            Id = thread[id],
                            Archived = thread[archived],
                            AuthorName = try thread[author][name] otherwise null,
                            CreatedAt = thread[createdAt],
                            RawText = thread[rawText],
                            HasParent = thread[hasParent],
                            ParentId = null,
                            HasNestedReplies = try List.Count(thread[replies][items]) > 0 otherwise false,
                            Type = "Thread"
                        ],
                        replies = try thread[replies][items] otherwise {},
                        replyRecords = List.Transform(replies, (reply) => [
                            Id = reply[id],
                            Archived = reply[archived],
                            AuthorName = try reply[author][name] otherwise null,
                            CreatedAt = reply[createdAt],
                            RawText = reply[rawText],
                            HasParent = reply[hasParent],
                            ParentId = thread[id],
                            HasNestedReplies = try List.Count(reply[replies][items]) > 0 otherwise false,
                            Type = "Reply"
                        ])
                    in
                        if List.Count(replies) = 0 then {threadRecord} else List.Combine({{threadRecord}, replyRecords})
                ),
                flatRows = List.Combine(expandedRows)
            in
                Table.FromRecords(flatRows)
        else
            // Create table without replies
            Table.FromRecords(List.Transform(commentThreads, (thread) => [
                Id = thread[id],
                Archived = thread[archived],
                AuthorName = try thread[author][name] otherwise null,
                CreatedAt = thread[createdAt],
                RawText = thread[rawText],
                HasParent = thread[hasParent],
                ParentId = null,
                HasNestedReplies = null,
                Type = "Thread"
            ]))
    in
        threadTable