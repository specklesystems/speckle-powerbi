// function for getting JSON data with prefixed chunks
(url as text) as table =>
    let
        // import the Parser and GetModel functions
        Parser = Extension.LoadFunction("Parser.pqm"),
        GetModel = Extension.LoadFunction("GetModel.pqm"),
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
        
        // get parsed URL components and model info
        parsedUrl = Parser(url),
        server = parsedUrl[baseUrl],
        modelInfo = GetModel(url),
        
        // get API key if available
        apiKey = try Extension.CurrentCredential()[Key] otherwise null,
        
        // make the API request to objects endpoint
        Source = Web.Contents(
            Text.Combine({server, "objects", parsedUrl[projectId], modelInfo[rootObjectId]}, "/"),
            [
                Headers = [
                    #"Authorization" = if apiKey = null then "" else Text.Format("Bearer #{0}", {apiKey})
                ],
                ManualStatusHandling = {400, 401, 403}
            ]
        ),
        
        // Convert to JSON string
        JsonString = Text.FromBinary(Json.FromValue(Json.Document(Source))),
        TotalLength = Text.Length(JsonString),
        
        // Calculate number of chunks needed
        ChunkSize = 29900,
        NumChunks = Number.RoundUp(TotalLength/ChunkSize),
        
        // Generate list of chunk indices
        ChunkIndices = List.Numbers(0, NumChunks),
        
        // Create chunks with formatted prefix
        CreateChunk = (index) =>
            let
                Start = index * ChunkSize,
                Length = if Start + ChunkSize > TotalLength 
                        then TotalLength - Start 
                        else ChunkSize,
                RawChunk = Text.Range(JsonString, Start, Length),
                // Format index with leading zeros (3 digits)
                FormattedIndex = Text.PadStart(Text.From(index + 1), 3, "0"),
                PrefixedChunk = "ROW_" & FormattedIndex & ":" & RawChunk
            in
                [
                    viewer_data = PrefixedChunk
                ],
        
        // Convert to table
        Chunks = Table.FromRecords(List.Transform(ChunkIndices, CreateChunk)),
        
        // Set correct data types
        FinalTable = Table.TransformColumnTypes(
            Chunks,
            {
                {"viewer_data", type text}
            }
        )
    in
        FinalTable