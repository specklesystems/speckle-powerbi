// Function for getting structured object data
(url as text) as table =>
    let
        // Import the parser function and getModel
        Parser = Extension.LoadFunction("Parser.pqm"),
        GetModel = Extension.LoadFunction("GetModel.pqm"),
        // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
        
        // Get parsed URL components and model info
        parsedUrl = Parser(url),
        server = parsedUrl[baseUrl],
        modelInfo = GetModel(url),
        
        // Get API key if available
        apiKey = try Extension.CurrentCredential()[Key] otherwise null,
        
        // Make the API request to objects endpoint
        Source = Web.Contents(
            Text.Combine({server, "objects", parsedUrl[projectId], modelInfo[rootObjectId]}, "/"),
            [
                Headers = [
                    #"Authorization" = if apiKey = null then "" else Text.Format("Bearer #{0}", {apiKey})
                ],
                ManualStatusHandling = {400, 401, 403}
            ]
        ),
        
        // Parse the JSON response
        JsonResponse = Json.Document(Source),
        
        // Convert list to table
        ConvertedToTable = Table.FromList(
            JsonResponse, 
            Splitter.SplitByNothing(), 
            null, 
            null, 
            ExtraValues.Error
        ),
        
        // Expand initial record
        ExpandedTable = Table.ExpandRecordColumn(
            ConvertedToTable, 
            "Column1", 
            {
                "id", 
                "name", 
                "type", 
                "units", 
                "version", 
                "elements", 
                "profile", 
                "material", 
                "__closure", 
                "properties", 
                "displayValue", 
                "data", 
                "speckle_type", 
                "applicationId", 
                "collectionType", 
                "renderMaterialProxies", 
                "totalChildrenCount"
            }
        ),
        
        // Remove rows where applicationId is null
        FilteredTable = Table.SelectRows(ExpandedTable, each [applicationId] <> null),
        
        // Create data column by combining all other columns except applicationId and speckle_type
        FinalTable = Table.FromRecords(
            List.Transform(
                Table.ToRecords(FilteredTable),
                each [
                    speckle_id = [id],
                    speckle_type = [speckle_type],
                    data = Record.RemoveFields(
                        _,
                        {"id", "speckle_type", "collectionType", "displayValue", "totalChildrenCount", "renderMaterialProxies", "data", "__closure"}
                    )
                ]
            )
        )
    in
        FinalTable