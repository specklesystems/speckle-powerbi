// function for getting object data
(url as text) as table =>
    let
        // Import the parser function and getModel
        Parser = Extension.LoadFunction("Parser.pqm"),
        GetModel = Extension.LoadFunction("GetModel.pqm"),
        // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
    
        // Get parsed URL components and model info
        parsedUrl = Parser(url),
        server = parsedUrl[baseUrl],
        modelInfo = GetModel(url),
        
        // Get API key if available
        apiKey = try Extension.CurrentCredential()[Key] otherwise null,
        
        // Make the API request to objects endpoint
        Source = Web.Contents(
            Text.Combine({server, "objects", parsedUrl[projectId], modelInfo[rootObjectId]}, "/"),
            [
                Headers = [
                    #"Authorization" = if apiKey = null then "" else Text.Format("Bearer #{0}", {apiKey})
                ],
                ManualStatusHandling = {400, 401, 403}
            ]
        ),
        
        // Parse the response and return the raw JSON
        JsonResponse = Json.Document(Source),

        ConvertedToTable = Table.FromList(
            JsonResponse, 
            Splitter.SplitByNothing(),
            {"viewer_data"},
            null,
            ExtraValues.Error
        ),

        ExpandedTable = Table.AddColumn(
            ConvertedToTable, 
            "speckle_id", 
            each Record.Field([viewer_data], "id"), 
            type text
        )
    in
        ExpandedTable