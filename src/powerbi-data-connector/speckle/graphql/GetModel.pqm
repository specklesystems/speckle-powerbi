// function for getting model information through graphql query
(url as text) as record =>
    let
        // import the parser function
        Parser = Extension.LoadFunction("Parser.pqm"),
    
        // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],
        
        // parse the url and get necessary fields
        parsedUrl = Parser(url),
        server = parsedUrl[baseUrl],
        projectId = parsedUrl[projectId],
        modelId = parsedUrl[modelId],
        
        // get API key if available
        apiKey = try Extension.CurrentCredential()[Key] otherwise null,
        
        // graphql query to get model info including root object id
        query = "query ($projectId: String!, $modelId: String!) {
            project(id: $projectId) {
                model(id: $modelId) {
                    id
                    name
                    versions {
                        items {
                            id
                            referencedObject
                        }
                    }
                }
            }
        }",
        
        variables = [
            projectId = projectId,
            modelId = modelId
        ],
        
        // make the api request
        Source = Web.Contents(
            Text.Combine({server, "graphql"}, "/"),
            [
                Headers = [
                    #"Method" = "POST",
                    #"Content-Type" = "application/json",
                    #"Authorization" = if apiKey = null then "" else Text.Format("Bearer #{0}", {apiKey})
                ],
                ManualStatusHandling = {400, 401, 403},
                Content = Json.FromValue([
                    query = query,
                    variables = variables
                ])
            ]
        ),
        
        // parse the response
        JsonResponse = Json.Document(Source),
        
        // extract needed information
        result = if Record.HasFields(JsonResponse, {"errors"}) then
            error JsonResponse[errors]{0}[message]
        else if JsonResponse[data]?[project]?[model] = null then
            error "Model not found or access denied. Please check your authentication and model ID."
        else 
            [
                modelId = JsonResponse[data][project][model][id],
                modelName = JsonResponse[data][project][model][name],
                versionId = JsonResponse[data][project][model][versions][items]{0}[id],
                rootObjectId = JsonResponse[data][project][model][versions][items]{0}[referencedObject]
            ]
    in
        result