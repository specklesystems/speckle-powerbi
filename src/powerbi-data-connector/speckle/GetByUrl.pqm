let
    Fetch = Extension.LoadFunction("Api.Fetch.pqm"),
    GetObject = Extension.LoadFunction("Api.GetObject.pqm"),
    GetAllObjectChildren = Extension.LoadFunction("Api.GetAllObjectChildren.pqm"),
    GetObjectFromCommit = Extension.LoadFunction("GetObjectFromCommit.pqm"),
    GetObjectFromBranch = Extension.LoadFunction("GetObjectFromBranch.pqm"),
    CommitReceived = Extension.LoadFunction("Api.CommitReceived.pqm"),
    ParseStreamUrl = Extension.LoadFunction("ParseStreamUrl.pqm"),
    Extension.LoadFunction = (fileName as text) =>
        let
            binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
        in
            try
                Expression.Evaluate(asText, #shared) catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ]
in
    (url as text) as table =>
        let
            // Get server and streamId, and branchName / commitId / objectid from the input url
            stream = ParseStreamUrl(url),
            id = stream[id],
            server = stream[server],
            commitObjectsTable =
                if (stream[urlType] = "Commit") then
                    GetObjectFromCommit(server, id, stream[commit])
                else if (stream[urlType] = "Object") then
                    GetAllObjectChildren(server, id, stream[object])
                else if (stream[urlType] = "Branch") then
                    GetObjectFromBranch(server, id, stream[branch])
                else
                    GetObjectFromBranch(server, id, "main"),

            // Get root object ID from metadata
            rootObjectId = Value.Metadata(commitObjectsTable)[objectId],

            // Fetch raw data once for root object
            rawData = if rootObjectId <> null then
                let
                    query = "query($streamId: String!, $objectId: String!) { 
                        stream( id: $streamId ) { 
                            object (id: $objectId) { 
                                data
                            }
                        }
                    }",
                    result = Fetch(server, query, [streamId = id, objectId = rootObjectId])
                in
                    result[stream][object][data]
            else 
                null,

            addStreamUrl = Table.AddColumn(commitObjectsTable, "Model URL", each server & "/streams/" & id),
            addParentObjectId = Table.AddColumn(
                addStreamUrl, "Version Object ID", each Value.Metadata(commitObjectsTable)[objectId]
            ),
            addUrlType = Table.AddColumn(addParentObjectId, "URL Type", each stream[urlType]),
            addObjectIdCol = Table.AddColumn(addUrlType, "Object ID", each try [data][id] otherwise null),
            addSpeckleTypeCol = Table.AddColumn(
                addObjectIdCol, "speckle_type", each try [data][speckle_type] otherwise null
            ),
            // Add raw data only for root object
            addRawDataCol = Table.AddColumn(
                addSpeckleTypeCol,
                "rawData",
                each if [Object ID] = rootObjectId then rawData else null,
                type record
            ),
            // removes rows where Object ID is null
            removeNullRows = Table.SelectRows(addRawDataCol, each [Object ID] <> null),
            final = Table.ReorderColumns(
                removeNullRows, {
                    "Model URL",
                    "URL Type",
                    "Version Object ID",
                    "Object ID",
                    "speckle_type",
                    "data",
                    "rawData"
                }
            )
        in
            final