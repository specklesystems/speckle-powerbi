(url as text, optional ExpandProperties as logical) as table =>
    let
        // set default value for ExpandProperties
        shouldExpandProperties = if ExpandProperties = null then false else ExpandProperties,

        // import required functions
        GetStructuredData = Extension.LoadFunction("GetStructuredData.pqm"),
        SendToServer = Extension.LoadFunction("SendToServer.pqm"),
        GetModel = Extension.LoadFunction("GetModel.pqm"),
        Parser = Extension.LoadFunction("Parser.pqm"),
        CheckPermissions = Extension.LoadFunction("CheckPermissions.pqm"),

        // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],

        // parse the URL to determine if it's a federated model
        parsedUrl = Parser(url),
        
        // check if user has permission to load the model
        permissionCheck = CheckPermissions(url),
        
        // assert that permission check returned a valid result
        permissionAssert = if not Record.HasFields(permissionCheck, {"authorized", "code", "message"}) then
            error "Invalid permission check result"
        else
            null,
        
        // if not authorized, throw an error with the message from the server
        authCheck = if not permissionCheck[authorized] then
            error Text.Format(
                "Permission denied: #{0} (Error code: #{1})", 
                {permissionCheck[message], permissionCheck[code]}
            )
        else
            null,
            
        // only proceed if user has permisson to load
        results = if permissionCheck[authorized] then
            if parsedUrl[isFederated] = true then
                // process each model in the federation
                let
                    modelsData = List.Transform(
                        parsedUrl[federatedModels],
                        each ProcessSingleModel(
                            parsedUrl[baseUrl], 
                            parsedUrl[projectId], 
                            [modelId], 
                            [versionId]
                        )
                    ),
                    
                    // extract all data tables
                    allTables = List.Transform(modelsData, each [Data]),
                    
                    // extract all root object IDs
                    allRootIds = List.Transform(modelsData, each [RootObjectId]),
                    
                    // combine all root object IDs into a comma-separated string
                    combinedRootIds = Text.Combine(allRootIds, ","),
                    
                    // combine all data tables
                    combinedData = Table.Combine(allTables),
                    
                    // replace the "Version Object ID" column with the combined root IDs
                    transformedData = Table.TransformColumns(
                        combinedData,
                        {"Version Object ID", each combinedRootIds}
                    ),

                    // expand properties column if requested and if it exists
                    finalData = if shouldExpandProperties and Table.HasColumns(transformedData, {"properties"}) then
                        try
                            Speckle.Utils.ExpandRecord(transformedData, "properties")
                        otherwise
                            transformedData  // fallback to original data if expansion fails
                    else
                        transformedData
                in
                    finalData
            else
                // use existing functionality for single models
                let
                    // get model name
                    modelInfo = GetModel(url),
                    modelName = modelInfo[modelName],

                    // get structured data
                    structuredData = GetStructuredData(url),

                    // rename column based on send status
                    newColumnName = "Version Object ID",
                    renamedData = Table.RenameColumns(structuredData, {{"Version Object ID", newColumnName}}),

                    // expand properties column if requested and if it exists
                    result = if shouldExpandProperties and Table.HasColumns(renamedData, {"properties"}) then
                        try
                            Speckle.Utils.ExpandRecord(renamedData, "properties")
                        otherwise
                            renamedData  // fallback to original data if expansion fails
                    else
                        renamedData
                in
                    result
        else
            error Text.Format(
                "Permission denied: #{0} (Error code: #{1})", 
                {permissionCheck[message], permissionCheck[code]}
            ),
                
        // function to process a single model and get its data
        ProcessSingleModel = (baseUrl, projectId, modelId, versionId) => 
            let
                // construct a standard URL for the model
                singleModelUrl = Text.Combine({
                    baseUrl, 
                    "/projects/", 
                    projectId, 
                    "/models/", 
                    modelId,
                    if versionId <> null then Text.Combine({"@", versionId}) else ""
                }),
                
                // get model info
                modelInfo = GetModel(singleModelUrl),
                rootObjectId = modelInfo[rootObjectId],
                modelName = modelInfo[modelName],
                
                // get structured data
                structuredData = GetStructuredData(singleModelUrl),
                
                // add the model name as context - with version id if exists
                result = Table.AddColumn(
                    structuredData,
                    "Source Model",
                    each if versionId <> null then
                        Text.Combine({modelName, "-", versionId})
                    else
                        modelName,
                    type text
                )
            in
                [
                    Data = result,
                    RootObjectId = rootObjectId
                ]
    in
        results
