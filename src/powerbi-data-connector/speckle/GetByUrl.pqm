(url as text) as table =>
    let
        // import required functions
        GetStructuredData = Extension.LoadFunction("GetStructuredData.pqm"),
        SendToServer = Extension.LoadFunction("SendToServer.pqm"),
        GetModel = Extension.LoadFunction("GetModel.pqm"),

        // the logic for importing functions from other files
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName),
                asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared)
                catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ],

        // get model name
        modelInfo = GetModel(url),
        modelName = modelInfo[modelName],

        // get sending status
        SendStatus = SendToServer(url),
        
        // get structured data
        StructuredData = GetStructuredData(url),

        // create navigation table
        source = #table(
            {"Name", "Data"},
            {
                { 
                    "Structured Data - " & modelName & SendStatus, 
                    StructuredData
                }
            }
        ),
        
        // add navigation table metadata
        tableType = Value.Type(source),
        newTableType = Type.AddTableKey(tableType, {"Name"}, true) meta [
            NavigationTable.NameColumn = "Name",
            NavigationTable.DataColumn = "Data",
            Documentation.Name = "Speckle Model"
        ],
        
        // convert to navigation table
        navTable = Value.ReplaceType(source, newTableType)
    in
        navTable