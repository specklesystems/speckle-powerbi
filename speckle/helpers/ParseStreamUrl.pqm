let
    GetModel = Extension.LoadFunction("Api.GetModel.pqm"),
    Extension.LoadFunction = (fileName as text) =>
        let
            binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
        in
            try
                Expression.Evaluate(asText, #shared) catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ]
in
    (url as text) as record =>
        let
            // Get server and streamId, and branchName / commitId / objectid from the input url
            server = Text.Combine({Uri.Parts(url)[Scheme], "://", Uri.Parts(url)[Host]}),
            segments = Text.Split(Text.AfterDelimiter(Uri.Parts(url)[Path], "/", 0), "/"),
            streamId = segments{1},
            modelList = if (List.Count(segments) = 4 and segments{2} = "models") then segments{3} else null,
            firstModel = Text.Split(modelList, ","){0},
            modelAndVersion = Text.Split(firstModel, "@"),
            modelId = modelAndVersion{0},
            versionId = if (List.Count(modelAndVersion) > 1) then modelAndVersion{1} else null,
            model = if (modelId <> null) then GetModel(server, streamId, modelId) else null,
            branchName = if (List.Count(segments) = 4 and segments{2} = "branches") then segments{3} else null,
            commitId = if (List.Count(segments) = 4 and segments{2} = "commits") then segments{3} else null,
            objectId = if (List.Count(segments) = 4 and segments{2} = "objects") then segments{3} else null,
            modelOrBranchName = if (model <> null) then model[name] else branchName,
            commitOrVersion = if (versionId <> null) then versionId else commitId,
            urlType =
                if (commitOrVersion <> null) then
                    "Commit"
                else if (objectId <> null) then
                    "Object"
                else if (modelOrBranchName <> null) then
                    "Branch"
                else
                    "Stream"
        in
            [
                urlType = urlType,
                server = server,
                id = streamId,
                branch = modelOrBranchName,
                commit = commitOrVersion,
                object = objectId
            ]
