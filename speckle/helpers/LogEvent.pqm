let
    GetApplicationSlug = Extension.LoadFunction("GetApplicationSlug.pqm"),
    GetUser = Extension.LoadFunction("Api.GetUser.pqm"),
    Hash = Extension.LoadFunction("Hash.pqm"),
    Extension.LoadFunction = (fileName as text) =>
        let
            binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
        in
            try
                Expression.Evaluate(asText, #shared) catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ]
in
    (server as text, commit as any) =>
        let
            trackUrl = "https://analytics.speckle.systems/track?ip=1",
            user = GetUser(server),
            isMultiplayer = user[id] <> commit[authorId],
            body = [
                event = "Receive",
                properties = [
                    server_id = Hash(server),
                    token = "acd87c5a50b56df91a795e999812a3a4",
                    hostApp = "powerbi",
                    sourceHostApp = GetApplicationSlug(commit[sourceApplication]),
                    sourceHostAppVersion = commit[sourceApplication],
                    isMultiplayer = user[id] <> commit[authorId]
                ]
            ],
            Result = Web.Contents(
                trackUrl,
                [
                    Headers = [
                        #"Method" = "POST",
                        #"Accept" = "text/plain",
                        #"Content-Type" = "application/json"
                    ],
                    Content = Text.ToBinary(Text.Combine({"data=", Text.FromBinary(Json.FromValue(body))}))
                ]
            ),
            // Hack to force execution
            Join = Text.Combine({server, Text.From(Json.Document(Result))}, "_____"),
            Disjoin = Text.Split(Join, "_____"){0}
        in
            Disjoin
