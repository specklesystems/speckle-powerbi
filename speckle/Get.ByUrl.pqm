let
    Fetch = Extension.LoadFunction("Api.Fetch.pqm"),
    Traverse = Extension.LoadFunction("Traverse.pqm"),
    GetObject = Extension.LoadFunction("Api.GetObject.pqm"),
    GetStreamCommit = Extension.LoadFunction("Get.StreamCommit.pqm"),
    GetBranchCommits = Extension.LoadFunction("Get.BranchCommits.pqm"),
    CommitReceived = Extension.LoadFunction("Api.CommitReceived.pqm"),
    ParseStreamUrl = Extension.LoadFunction("ParseStreamUrl.pqm"),
    CleanUpObject = Extension.LoadFunction("CleanUpObject.pqm"),
    Extension.LoadFunction = (fileName as text) =>
        let
            binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
        in
            try
                Expression.Evaluate(asText, #shared) catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ]
in
    (url as text) as record =>
        let
            // Get server and streamId, and branchName / commitId / objectid from the input url
            stream = ParseStreamUrl(url),
            id = stream[id],
            server = stream[server],
            commit =
                if (stream[urlType] = "Stream") then
                    GetBranchCommits(server, id, "main", 1){0}
                else if (stream[urlType] = "Branch") then
                    GetBranchCommits(server, id, stream[branch], 1){0}
                else if (stream[urlType] = "Commit") then
                    GetStreamCommit(server, id, stream[commit])
                else
                    //We deal with object URLs directly
                    [referencedObject = stream[object]],
            object = GetObject(server, id, commit[referencedObject]),
            rr = CommitReceived(server, id, commit),
            result = Traverse(CleanUpObject(object) meta [server = server, stream = id, commit = commit])
        in
            if rr then
                result
            else
                result
