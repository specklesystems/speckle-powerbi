(server as text, optional streamId as text, optional objectId as text) as table =>
    let
        apiKey = try Extension.CurrentCredential()[Key] otherwise null,
        Source = Web.Contents(
            Text.Combine({server, "objects", streamId, objectId}, "/"),
            [
                Headers = [
                    #"Method" = "GET",
                    #"Content-Type" = "application/json",
                    #"Authorization" = if apiKey = null then "" else Text.Format("Bearer #{0}", {apiKey})
                ],
                ManualStatusHandling = {400}
            ]
        ),
        json = Json.Document(Source),
        clean = List.Select(json, each _[speckle_type] <> "Speckle.Core.Models.DataChunk"),
        t = Table.FromColumns({clean}, {"data"}),
        addStreamUrl = Table.AddColumn(t, "Stream URL", each server & "/streams/" & streamId),
        addObjectIdCol = Table.AddColumn(addStreamUrl, "Object ID", each try _[data][id] otherwise null),
        addSpeckleTypeCol = Table.AddColumn(
            addObjectIdCol, "speckle_type", each try _[data][speckle_type] otherwise null
        ),
        Speckle.CleanUpObjects = Extension.LoadFunction("CleanUpObjects.pqm"),
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared) catch (e) =>
                        error
                            [
                                Reason = "Extension.LoadFunction Failure",
                                Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                                Message.Parameters = {fileName, e[Reason], e[Message]},
                                Detail = [File = fileName, Error = e]
                            ]
    in
        addSpeckleTypeCol
