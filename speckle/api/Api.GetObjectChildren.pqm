let
    Speckle.Api.Fetch = Extension.LoadFunction("Api.Fetch.pqm"),
    Speckle.CleanUpObjects = Extension.LoadFunction("CleanUpObjects.pqm"),
    Extension.LoadFunction = (fileName as text) =>
        let
            binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
        in
            try
                Expression.Evaluate(asText, #shared) catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ]
in
    (
        server as text,
        streamId as text,
        objectId as text,
        optional limit as number,
        optional cursor as text,
        optional select as list
    ) =>
        let
            query = "query($streamId: String!, $objectId: String!, $limit: Int, $cursor: String, $select: [String]) { 
            stream( id: $streamId ) { 
                object (id: $objectId) { 
                    children(select: $select, limit: $limit, cursor: $cursor) { 
                        cursor
                        objects {
                            data
                        } 
                    } 
                } 
            } 
        }",
            #"JSON" = Speckle.Api.Fetch(
                server,
                query,
                [
                    streamId = streamId,
                    objectId = objectId,
                    limit = limit,
                    cursor = cursor,
                    select = select
                ]
            ),
            children = #"JSON"[stream][object][children],
            nextCursor = children[cursor],
            clean = Speckle.CleanUpObjects(children[objects])
        in
            Table.FromRecords(clean) meta [Cursor = nextCursor]
