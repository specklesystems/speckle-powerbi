let
    Table.GenerateByPage = Extension.LoadFunction("Table.GenerateByPage.pqm"),
    Speckle.Api.GetObjectChildren = Extension.LoadFunction("Api.GetObjectChildren.pqm"),
    Extension.LoadFunction = (fileName as text) =>
        let
            binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
        in
            try
                Expression.Evaluate(asText, #shared) catch (e) =>
                    error
                        [
                            Reason = "Extension.LoadFunction Failure",
                            Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                            Message.Parameters = {fileName, e[Reason], e[Message]},
                            Detail = [File = fileName, Error = e]
                        ]
in
    // Read all pages of data.
    // After every page, we check the "nextCursor" record on the metadata of the previous request.
    // Table.GenerateByPage will keep asking for more pages until we return null.
    (server as text, streamId as text, objectId as text, optional cursor as text) as table =>
        Table.GenerateByPage(
            (previous) =>
                let
                    // if previous is null, then this is our first page of data
                    nextCursor = if (previous = null) then cursor else Value.Metadata(previous)[Cursor]?,
                    // if the cursor is null but the prevous page is not, we've reached the end
                    page =
                        if (previous <> null and nextCursor = null) then
                            null
                        else
                            Speckle.Api.GetObjectChildren(server, streamId, objectId, 1000, nextCursor)
                in
                    page
        ) meta [server = server, streamId = streamId, objectId = objectId]
