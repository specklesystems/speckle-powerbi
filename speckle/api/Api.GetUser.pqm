(url as text) =>
    let
        userType = type [name = text, email = text, id = text],
        query = "query {
            activeUser { name email id }
        }",
        // Imports
        Speckle.Api.Fetch = Extension.LoadFunction("Api.Fetch.pqm"),
        ParseUrl = Extension.LoadFunction("ParseStreamUrl.pqm"),
        urlObject = ParseUrl(url),
        Extension.LoadFunction = (fileName as text) =>
            let
                binary = Extension.Contents(fileName), asText = Text.FromBinary(binary)
            in
                try
                    Expression.Evaluate(asText, #shared) catch (e) =>
                        error
                            [
                                Reason = "Extension.LoadFunction Failure",
                                Message.Format = "Loading '#{0}' failed - '#{1}': '#{2}'",
                                Message.Parameters = {fileName, e[Reason], e[Message]},
                                Detail = [File = fileName, Error = e]
                            ],
        user = Speckle.Api.Fetch(urlObject[server], query)[activeUser]
    in
        // Read receipts should fail gracefully no matter what
        Value.ReplaceType(user, userType)
